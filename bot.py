import os
import logging
from typing import Optional
from telegram import Bot
from telegram.error import TelegramError
from sqlalchemy.orm import Session
from models import QueueSlot, User, Branch, Organization
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_GROUP_ID

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        try:
            self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
            self.chat_id = TELEGRAM_GROUP_ID
            logger.info("TelegramNotifier —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramNotifier: {e}")
            raise

    async def send_booking_notification(self, slot: QueueSlot, db_session: Session):
        try:
            user = db_session.query(User).filter(User.id == slot.user_id).first()
            branch = db_session.query(Branch).filter(Branch.id == slot.branch_id).first()
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {slot.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            if not branch:
                logger.error(f"–§–∏–ª–∏–∞–ª —Å ID {slot.branch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            organization = db_session.query(Organization).filter(
                Organization.id == branch.organization_id
            ).first()
            
            org_name = organization.name if organization else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"

            message = (
                "üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìß Email: {user.email}\n"
                f"üìå –§–∏–ª–∏–∞–ª: {branch.name}\n"
                f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name}\n"
                f"üìç –ê–¥—Ä–µ—Å: {branch.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –î–∞—Ç–∞: {slot.date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {slot.time}\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: {slot.id}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {slot.status}"
            )

            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="Markdown"
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ {slot.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {self.chat_id}")
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

    async def send_admin_notification(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=f"‚ö†Ô∏è –ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n{message}"
            )
            logger.info("–ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

try:
    telegram_notifier = TelegramNotifier()
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TelegramNotifier: {e}")
    telegram_notifier = None

if __name__ == "__main__":
    import asyncio
    from database import SessionLocal
    
    async def test_notification():
        db = SessionLocal()
        try:
            test_slot = QueueSlot(
                id=999,
                branch_id=1,
                user_id=1,
                date="2023-12-31",
                time="15:00",
                status="–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω"
            )
            
            if telegram_notifier:
                await telegram_notifier.send_booking_notification(test_slot, db)
            else:
                print("TelegramNotifier –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        finally:
            db.close()
    
    asyncio.run(test_notification())